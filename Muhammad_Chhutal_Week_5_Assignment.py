{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "f1fc94f3-1a9b-4948-b1a9-638b904057e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ====================================================\n",
    "# DS Automation Assignment - Churn Prediction with PyCaret\n",
    "# ====================================================\n",
    "\n",
    "# Step 1: Imports\n",
    "import pandas as pd\n",
    "from pycaret.classification import *\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "0bb7c841-15ab-47f9-94c9-da6965af4996",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Data Shape: (7043, 13)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>tenure</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>ChargesPerMonth_from_total</th>\n",
       "      <th>MonthsOfService_est</th>\n",
       "      <th>PhoneService_Yes</th>\n",
       "      <th>Contract_One year</th>\n",
       "      <th>Contract_Two year</th>\n",
       "      <th>PaymentMethod_Credit card (automatic)</th>\n",
       "      <th>PaymentMethod_Electronic check</th>\n",
       "      <th>PaymentMethod_Mailed check</th>\n",
       "      <th>Churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>1</td>\n",
       "      <td>29.85</td>\n",
       "      <td>29.85</td>\n",
       "      <td>29.850000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>34</td>\n",
       "      <td>56.95</td>\n",
       "      <td>1889.50</td>\n",
       "      <td>55.573529</td>\n",
       "      <td>33.178227</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>2</td>\n",
       "      <td>53.85</td>\n",
       "      <td>108.15</td>\n",
       "      <td>54.075000</td>\n",
       "      <td>2.008357</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>45</td>\n",
       "      <td>42.30</td>\n",
       "      <td>1840.75</td>\n",
       "      <td>40.905556</td>\n",
       "      <td>43.516548</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>2</td>\n",
       "      <td>70.70</td>\n",
       "      <td>151.65</td>\n",
       "      <td>75.825000</td>\n",
       "      <td>2.144979</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID  tenure  MonthlyCharges  TotalCharges  \\\n",
       "0  7590-VHVEG       1           29.85         29.85   \n",
       "1  5575-GNVDE      34           56.95       1889.50   \n",
       "2  3668-QPYBK       2           53.85        108.15   \n",
       "3  7795-CFOCW      45           42.30       1840.75   \n",
       "4  9237-HQITU       2           70.70        151.65   \n",
       "\n",
       "   ChargesPerMonth_from_total  MonthsOfService_est  PhoneService_Yes  \\\n",
       "0                   29.850000             1.000000                 0   \n",
       "1                   55.573529            33.178227                 1   \n",
       "2                   54.075000             2.008357                 1   \n",
       "3                   40.905556            43.516548                 0   \n",
       "4                   75.825000             2.144979                 1   \n",
       "\n",
       "   Contract_One year  Contract_Two year  \\\n",
       "0                  0                  0   \n",
       "1                  1                  0   \n",
       "2                  0                  0   \n",
       "3                  1                  0   \n",
       "4                  0                  0   \n",
       "\n",
       "   PaymentMethod_Credit card (automatic)  PaymentMethod_Electronic check  \\\n",
       "0                                      0                               1   \n",
       "1                                      0                               0   \n",
       "2                                      0                               0   \n",
       "3                                      0                               0   \n",
       "4                                      0                               1   \n",
       "\n",
       "   PaymentMethod_Mailed check  Churn  \n",
       "0                           0      0  \n",
       "1                           1      0  \n",
       "2                           1      1  \n",
       "3                           0      0  \n",
       "4                           0      1  "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load churn dataset from Week 2\n",
    "# Replace 'week2_churn_data.csv' with your actual Week 2 prepared churn file path\n",
    "churn_df = pd.read_csv(\"churn_data_cleaned_week2.csv\")\n",
    "\n",
    "print(\"Training Data Shape:\", churn_df.shape)\n",
    "churn_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "9bafa1a4-f1d8-475c-b89d-0031968a285d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_716c8_row9_col1 {\n",
       "  background-color: lightgreen;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_716c8\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_716c8_level0_col0\" class=\"col_heading level0 col0\" >Description</th>\n",
       "      <th id=\"T_716c8_level0_col1\" class=\"col_heading level0 col1\" >Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_716c8_row0_col0\" class=\"data row0 col0\" >Session id</td>\n",
       "      <td id=\"T_716c8_row0_col1\" class=\"data row0 col1\" >123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_716c8_row1_col0\" class=\"data row1 col0\" >Target</td>\n",
       "      <td id=\"T_716c8_row1_col1\" class=\"data row1 col1\" >Churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_716c8_row2_col0\" class=\"data row2 col0\" >Target type</td>\n",
       "      <td id=\"T_716c8_row2_col1\" class=\"data row2 col1\" >Binary</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_716c8_row3_col0\" class=\"data row3 col0\" >Original data shape</td>\n",
       "      <td id=\"T_716c8_row3_col1\" class=\"data row3 col1\" >(7043, 13)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_716c8_row4_col0\" class=\"data row4 col0\" >Transformed data shape</td>\n",
       "      <td id=\"T_716c8_row4_col1\" class=\"data row4 col1\" >(7043, 13)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
       "      <td id=\"T_716c8_row5_col0\" class=\"data row5 col0\" >Transformed train set shape</td>\n",
       "      <td id=\"T_716c8_row5_col1\" class=\"data row5 col1\" >(4930, 13)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
       "      <td id=\"T_716c8_row6_col0\" class=\"data row6 col0\" >Transformed test set shape</td>\n",
       "      <td id=\"T_716c8_row6_col1\" class=\"data row6 col1\" >(2113, 13)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
       "      <td id=\"T_716c8_row7_col0\" class=\"data row7 col0\" >Numeric features</td>\n",
       "      <td id=\"T_716c8_row7_col1\" class=\"data row7 col1\" >11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
       "      <td id=\"T_716c8_row8_col0\" class=\"data row8 col0\" >Categorical features</td>\n",
       "      <td id=\"T_716c8_row8_col1\" class=\"data row8 col1\" >1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
       "      <td id=\"T_716c8_row9_col0\" class=\"data row9 col0\" >Preprocess</td>\n",
       "      <td id=\"T_716c8_row9_col1\" class=\"data row9 col1\" >True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
       "      <td id=\"T_716c8_row10_col0\" class=\"data row10 col0\" >Imputation type</td>\n",
       "      <td id=\"T_716c8_row10_col1\" class=\"data row10 col1\" >simple</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
       "      <td id=\"T_716c8_row11_col0\" class=\"data row11 col0\" >Numeric imputation</td>\n",
       "      <td id=\"T_716c8_row11_col1\" class=\"data row11 col1\" >mean</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
       "      <td id=\"T_716c8_row12_col0\" class=\"data row12 col0\" >Categorical imputation</td>\n",
       "      <td id=\"T_716c8_row12_col1\" class=\"data row12 col1\" >mode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
       "      <td id=\"T_716c8_row13_col0\" class=\"data row13 col0\" >Maximum one-hot encoding</td>\n",
       "      <td id=\"T_716c8_row13_col1\" class=\"data row13 col1\" >25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
       "      <td id=\"T_716c8_row14_col0\" class=\"data row14 col0\" >Encoding method</td>\n",
       "      <td id=\"T_716c8_row14_col1\" class=\"data row14 col1\" >None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
       "      <td id=\"T_716c8_row15_col0\" class=\"data row15 col0\" >Fold Generator</td>\n",
       "      <td id=\"T_716c8_row15_col1\" class=\"data row15 col1\" >StratifiedKFold</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
       "      <td id=\"T_716c8_row16_col0\" class=\"data row16 col0\" >Fold Number</td>\n",
       "      <td id=\"T_716c8_row16_col1\" class=\"data row16 col1\" >10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
       "      <td id=\"T_716c8_row17_col0\" class=\"data row17 col0\" >CPU Jobs</td>\n",
       "      <td id=\"T_716c8_row17_col1\" class=\"data row17 col1\" >-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row18\" class=\"row_heading level0 row18\" >18</th>\n",
       "      <td id=\"T_716c8_row18_col0\" class=\"data row18 col0\" >Use GPU</td>\n",
       "      <td id=\"T_716c8_row18_col1\" class=\"data row18 col1\" >False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row19\" class=\"row_heading level0 row19\" >19</th>\n",
       "      <td id=\"T_716c8_row19_col0\" class=\"data row19 col0\" >Log Experiment</td>\n",
       "      <td id=\"T_716c8_row19_col1\" class=\"data row19 col1\" >False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row20\" class=\"row_heading level0 row20\" >20</th>\n",
       "      <td id=\"T_716c8_row20_col0\" class=\"data row20 col0\" >Experiment Name</td>\n",
       "      <td id=\"T_716c8_row20_col1\" class=\"data row20 col1\" >clf-default-name</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_716c8_level0_row21\" class=\"row_heading level0 row21\" >21</th>\n",
       "      <td id=\"T_716c8_row21_col0\" class=\"data row21 col0\" >USI</td>\n",
       "      <td id=\"T_716c8_row21_col1\" class=\"data row21 col1\" >a0f0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x16a62486fd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_e1567 th {\n",
       "  text-align: left;\n",
       "}\n",
       "#T_e1567_row0_col0, #T_e1567_row0_col2, #T_e1567_row0_col3, #T_e1567_row0_col5, #T_e1567_row0_col6, #T_e1567_row0_col7, #T_e1567_row1_col0, #T_e1567_row1_col1, #T_e1567_row1_col2, #T_e1567_row1_col3, #T_e1567_row1_col4, #T_e1567_row1_col5, #T_e1567_row1_col6, #T_e1567_row1_col7, #T_e1567_row2_col0, #T_e1567_row2_col1, #T_e1567_row2_col2, #T_e1567_row2_col4, #T_e1567_row3_col0, #T_e1567_row3_col1, #T_e1567_row3_col2, #T_e1567_row3_col3, #T_e1567_row3_col4, #T_e1567_row3_col5, #T_e1567_row3_col6, #T_e1567_row3_col7, #T_e1567_row4_col0, #T_e1567_row4_col1, #T_e1567_row4_col2, #T_e1567_row4_col3, #T_e1567_row4_col4, #T_e1567_row4_col5, #T_e1567_row4_col6, #T_e1567_row4_col7, #T_e1567_row5_col0, #T_e1567_row5_col1, #T_e1567_row5_col3, #T_e1567_row5_col4, #T_e1567_row5_col5, #T_e1567_row5_col6, #T_e1567_row5_col7, #T_e1567_row6_col0, #T_e1567_row6_col1, #T_e1567_row6_col2, #T_e1567_row6_col3, #T_e1567_row6_col4, #T_e1567_row6_col5, #T_e1567_row6_col6, #T_e1567_row6_col7, #T_e1567_row7_col0, #T_e1567_row7_col1, #T_e1567_row7_col2, #T_e1567_row7_col3, #T_e1567_row7_col4, #T_e1567_row7_col5, #T_e1567_row7_col6, #T_e1567_row7_col7, #T_e1567_row8_col0, #T_e1567_row8_col1, #T_e1567_row8_col2, #T_e1567_row8_col3, #T_e1567_row8_col4, #T_e1567_row8_col5, #T_e1567_row8_col6, #T_e1567_row8_col7, #T_e1567_row9_col0, #T_e1567_row9_col1, #T_e1567_row9_col2, #T_e1567_row9_col3, #T_e1567_row9_col4, #T_e1567_row9_col5, #T_e1567_row9_col6, #T_e1567_row9_col7, #T_e1567_row10_col0, #T_e1567_row10_col1, #T_e1567_row10_col2, #T_e1567_row10_col3, #T_e1567_row10_col4, #T_e1567_row10_col5, #T_e1567_row10_col6, #T_e1567_row10_col7, #T_e1567_row11_col0, #T_e1567_row11_col1, #T_e1567_row11_col2, #T_e1567_row11_col3, #T_e1567_row11_col4, #T_e1567_row11_col5, #T_e1567_row11_col6, #T_e1567_row11_col7, #T_e1567_row12_col0, #T_e1567_row12_col1, #T_e1567_row12_col2, #T_e1567_row12_col3, #T_e1567_row12_col4, #T_e1567_row12_col5, #T_e1567_row12_col6, #T_e1567_row12_col7, #T_e1567_row13_col0, #T_e1567_row13_col1, #T_e1567_row13_col2, #T_e1567_row13_col3, #T_e1567_row13_col4, #T_e1567_row13_col5, #T_e1567_row13_col6, #T_e1567_row13_col7 {\n",
       "  text-align: left;\n",
       "}\n",
       "#T_e1567_row0_col1, #T_e1567_row0_col4, #T_e1567_row2_col3, #T_e1567_row2_col5, #T_e1567_row2_col6, #T_e1567_row2_col7, #T_e1567_row5_col2 {\n",
       "  text-align: left;\n",
       "  background-color: yellow;\n",
       "}\n",
       "#T_e1567_row0_col8, #T_e1567_row1_col8, #T_e1567_row2_col8, #T_e1567_row3_col8, #T_e1567_row5_col8, #T_e1567_row6_col8, #T_e1567_row7_col8, #T_e1567_row8_col8, #T_e1567_row9_col8, #T_e1567_row11_col8, #T_e1567_row12_col8, #T_e1567_row13_col8 {\n",
       "  text-align: left;\n",
       "  background-color: lightgrey;\n",
       "}\n",
       "#T_e1567_row4_col8, #T_e1567_row10_col8 {\n",
       "  text-align: left;\n",
       "  background-color: yellow;\n",
       "  background-color: lightgrey;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_e1567\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_e1567_level0_col0\" class=\"col_heading level0 col0\" >Model</th>\n",
       "      <th id=\"T_e1567_level0_col1\" class=\"col_heading level0 col1\" >Accuracy</th>\n",
       "      <th id=\"T_e1567_level0_col2\" class=\"col_heading level0 col2\" >AUC</th>\n",
       "      <th id=\"T_e1567_level0_col3\" class=\"col_heading level0 col3\" >Recall</th>\n",
       "      <th id=\"T_e1567_level0_col4\" class=\"col_heading level0 col4\" >Prec.</th>\n",
       "      <th id=\"T_e1567_level0_col5\" class=\"col_heading level0 col5\" >F1</th>\n",
       "      <th id=\"T_e1567_level0_col6\" class=\"col_heading level0 col6\" >Kappa</th>\n",
       "      <th id=\"T_e1567_level0_col7\" class=\"col_heading level0 col7\" >MCC</th>\n",
       "      <th id=\"T_e1567_level0_col8\" class=\"col_heading level0 col8\" >TT (Sec)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row0\" class=\"row_heading level0 row0\" >svm</th>\n",
       "      <td id=\"T_e1567_row0_col0\" class=\"data row0 col0\" >SVM - Linear Kernel</td>\n",
       "      <td id=\"T_e1567_row0_col1\" class=\"data row0 col1\" >0.7740</td>\n",
       "      <td id=\"T_e1567_row0_col2\" class=\"data row0 col2\" >0.7469</td>\n",
       "      <td id=\"T_e1567_row0_col3\" class=\"data row0 col3\" >0.3955</td>\n",
       "      <td id=\"T_e1567_row0_col4\" class=\"data row0 col4\" >0.6249</td>\n",
       "      <td id=\"T_e1567_row0_col5\" class=\"data row0 col5\" >0.4672</td>\n",
       "      <td id=\"T_e1567_row0_col6\" class=\"data row0 col6\" >0.3388</td>\n",
       "      <td id=\"T_e1567_row0_col7\" class=\"data row0 col7\" >0.3597</td>\n",
       "      <td id=\"T_e1567_row0_col8\" class=\"data row0 col8\" >0.0150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row1\" class=\"row_heading level0 row1\" >knn</th>\n",
       "      <td id=\"T_e1567_row1_col0\" class=\"data row1 col0\" >K Neighbors Classifier</td>\n",
       "      <td id=\"T_e1567_row1_col1\" class=\"data row1 col1\" >0.7649</td>\n",
       "      <td id=\"T_e1567_row1_col2\" class=\"data row1 col2\" >0.7476</td>\n",
       "      <td id=\"T_e1567_row1_col3\" class=\"data row1 col3\" >0.4312</td>\n",
       "      <td id=\"T_e1567_row1_col4\" class=\"data row1 col4\" >0.5758</td>\n",
       "      <td id=\"T_e1567_row1_col5\" class=\"data row1 col5\" >0.4923</td>\n",
       "      <td id=\"T_e1567_row1_col6\" class=\"data row1 col6\" >0.3437</td>\n",
       "      <td id=\"T_e1567_row1_col7\" class=\"data row1 col7\" >0.3502</td>\n",
       "      <td id=\"T_e1567_row1_col8\" class=\"data row1 col8\" >0.1950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row2\" class=\"row_heading level0 row2\" >nb</th>\n",
       "      <td id=\"T_e1567_row2_col0\" class=\"data row2 col0\" >Naive Bayes</td>\n",
       "      <td id=\"T_e1567_row2_col1\" class=\"data row2 col1\" >0.7444</td>\n",
       "      <td id=\"T_e1567_row2_col2\" class=\"data row2 col2\" >0.8136</td>\n",
       "      <td id=\"T_e1567_row2_col3\" class=\"data row2 col3\" >0.7179</td>\n",
       "      <td id=\"T_e1567_row2_col4\" class=\"data row2 col4\" >0.5132</td>\n",
       "      <td id=\"T_e1567_row2_col5\" class=\"data row2 col5\" >0.5984</td>\n",
       "      <td id=\"T_e1567_row2_col6\" class=\"data row2 col6\" >0.4185</td>\n",
       "      <td id=\"T_e1567_row2_col7\" class=\"data row2 col7\" >0.4314</td>\n",
       "      <td id=\"T_e1567_row2_col8\" class=\"data row2 col8\" >0.0120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row3\" class=\"row_heading level0 row3\" >lr</th>\n",
       "      <td id=\"T_e1567_row3_col0\" class=\"data row3 col0\" >Logistic Regression</td>\n",
       "      <td id=\"T_e1567_row3_col1\" class=\"data row3 col1\" >0.7426</td>\n",
       "      <td id=\"T_e1567_row3_col2\" class=\"data row3 col2\" >0.8110</td>\n",
       "      <td id=\"T_e1567_row3_col3\" class=\"data row3 col3\" >0.0474</td>\n",
       "      <td id=\"T_e1567_row3_col4\" class=\"data row3 col4\" >0.5779</td>\n",
       "      <td id=\"T_e1567_row3_col5\" class=\"data row3 col5\" >0.0854</td>\n",
       "      <td id=\"T_e1567_row3_col6\" class=\"data row3 col6\" >0.0573</td>\n",
       "      <td id=\"T_e1567_row3_col7\" class=\"data row3 col7\" >0.1143</td>\n",
       "      <td id=\"T_e1567_row3_col8\" class=\"data row3 col8\" >0.4040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row4\" class=\"row_heading level0 row4\" >dt</th>\n",
       "      <td id=\"T_e1567_row4_col0\" class=\"data row4 col0\" >Decision Tree Classifier</td>\n",
       "      <td id=\"T_e1567_row4_col1\" class=\"data row4 col1\" >0.7347</td>\n",
       "      <td id=\"T_e1567_row4_col2\" class=\"data row4 col2\" >0.5000</td>\n",
       "      <td id=\"T_e1567_row4_col3\" class=\"data row4 col3\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row4_col4\" class=\"data row4 col4\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row4_col5\" class=\"data row4 col5\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row4_col6\" class=\"data row4 col6\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row4_col7\" class=\"data row4 col7\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row4_col8\" class=\"data row4 col8\" >0.0110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row5\" class=\"row_heading level0 row5\" >ridge</th>\n",
       "      <td id=\"T_e1567_row5_col0\" class=\"data row5 col0\" >Ridge Classifier</td>\n",
       "      <td id=\"T_e1567_row5_col1\" class=\"data row5 col1\" >0.7347</td>\n",
       "      <td id=\"T_e1567_row5_col2\" class=\"data row5 col2\" >0.8246</td>\n",
       "      <td id=\"T_e1567_row5_col3\" class=\"data row5 col3\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row5_col4\" class=\"data row5 col4\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row5_col5\" class=\"data row5 col5\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row5_col6\" class=\"data row5 col6\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row5_col7\" class=\"data row5 col7\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row5_col8\" class=\"data row5 col8\" >0.0130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row6\" class=\"row_heading level0 row6\" >rf</th>\n",
       "      <td id=\"T_e1567_row6_col0\" class=\"data row6 col0\" >Random Forest Classifier</td>\n",
       "      <td id=\"T_e1567_row6_col1\" class=\"data row6 col1\" >0.7347</td>\n",
       "      <td id=\"T_e1567_row6_col2\" class=\"data row6 col2\" >0.6955</td>\n",
       "      <td id=\"T_e1567_row6_col3\" class=\"data row6 col3\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row6_col4\" class=\"data row6 col4\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row6_col5\" class=\"data row6 col5\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row6_col6\" class=\"data row6 col6\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row6_col7\" class=\"data row6 col7\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row6_col8\" class=\"data row6 col8\" >0.0580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row7\" class=\"row_heading level0 row7\" >qda</th>\n",
       "      <td id=\"T_e1567_row7_col0\" class=\"data row7 col0\" >Quadratic Discriminant Analysis</td>\n",
       "      <td id=\"T_e1567_row7_col1\" class=\"data row7 col1\" >0.7347</td>\n",
       "      <td id=\"T_e1567_row7_col2\" class=\"data row7 col2\" >0.5000</td>\n",
       "      <td id=\"T_e1567_row7_col3\" class=\"data row7 col3\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row7_col4\" class=\"data row7 col4\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row7_col5\" class=\"data row7 col5\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row7_col6\" class=\"data row7 col6\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row7_col7\" class=\"data row7 col7\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row7_col8\" class=\"data row7 col8\" >0.0120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row8\" class=\"row_heading level0 row8\" >ada</th>\n",
       "      <td id=\"T_e1567_row8_col0\" class=\"data row8 col0\" >Ada Boost Classifier</td>\n",
       "      <td id=\"T_e1567_row8_col1\" class=\"data row8 col1\" >0.7347</td>\n",
       "      <td id=\"T_e1567_row8_col2\" class=\"data row8 col2\" >0.5000</td>\n",
       "      <td id=\"T_e1567_row8_col3\" class=\"data row8 col3\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row8_col4\" class=\"data row8 col4\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row8_col5\" class=\"data row8 col5\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row8_col6\" class=\"data row8 col6\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row8_col7\" class=\"data row8 col7\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row8_col8\" class=\"data row8 col8\" >0.0120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row9\" class=\"row_heading level0 row9\" >gbc</th>\n",
       "      <td id=\"T_e1567_row9_col0\" class=\"data row9 col0\" >Gradient Boosting Classifier</td>\n",
       "      <td id=\"T_e1567_row9_col1\" class=\"data row9 col1\" >0.7347</td>\n",
       "      <td id=\"T_e1567_row9_col2\" class=\"data row9 col2\" >0.5100</td>\n",
       "      <td id=\"T_e1567_row9_col3\" class=\"data row9 col3\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row9_col4\" class=\"data row9 col4\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row9_col5\" class=\"data row9 col5\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row9_col6\" class=\"data row9 col6\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row9_col7\" class=\"data row9 col7\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row9_col8\" class=\"data row9 col8\" >0.0510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row10\" class=\"row_heading level0 row10\" >lda</th>\n",
       "      <td id=\"T_e1567_row10_col0\" class=\"data row10 col0\" >Linear Discriminant Analysis</td>\n",
       "      <td id=\"T_e1567_row10_col1\" class=\"data row10 col1\" >0.7347</td>\n",
       "      <td id=\"T_e1567_row10_col2\" class=\"data row10 col2\" >0.5000</td>\n",
       "      <td id=\"T_e1567_row10_col3\" class=\"data row10 col3\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row10_col4\" class=\"data row10 col4\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row10_col5\" class=\"data row10 col5\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row10_col6\" class=\"data row10 col6\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row10_col7\" class=\"data row10 col7\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row10_col8\" class=\"data row10 col8\" >0.0110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row11\" class=\"row_heading level0 row11\" >et</th>\n",
       "      <td id=\"T_e1567_row11_col0\" class=\"data row11 col0\" >Extra Trees Classifier</td>\n",
       "      <td id=\"T_e1567_row11_col1\" class=\"data row11 col1\" >0.7347</td>\n",
       "      <td id=\"T_e1567_row11_col2\" class=\"data row11 col2\" >0.5935</td>\n",
       "      <td id=\"T_e1567_row11_col3\" class=\"data row11 col3\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row11_col4\" class=\"data row11 col4\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row11_col5\" class=\"data row11 col5\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row11_col6\" class=\"data row11 col6\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row11_col7\" class=\"data row11 col7\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row11_col8\" class=\"data row11 col8\" >0.0420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row12\" class=\"row_heading level0 row12\" >lightgbm</th>\n",
       "      <td id=\"T_e1567_row12_col0\" class=\"data row12 col0\" >Light Gradient Boosting Machine</td>\n",
       "      <td id=\"T_e1567_row12_col1\" class=\"data row12 col1\" >0.7347</td>\n",
       "      <td id=\"T_e1567_row12_col2\" class=\"data row12 col2\" >0.5462</td>\n",
       "      <td id=\"T_e1567_row12_col3\" class=\"data row12 col3\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row12_col4\" class=\"data row12 col4\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row12_col5\" class=\"data row12 col5\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row12_col6\" class=\"data row12 col6\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row12_col7\" class=\"data row12 col7\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row12_col8\" class=\"data row12 col8\" >0.0390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_e1567_level0_row13\" class=\"row_heading level0 row13\" >dummy</th>\n",
       "      <td id=\"T_e1567_row13_col0\" class=\"data row13 col0\" >Dummy Classifier</td>\n",
       "      <td id=\"T_e1567_row13_col1\" class=\"data row13 col1\" >0.7347</td>\n",
       "      <td id=\"T_e1567_row13_col2\" class=\"data row13 col2\" >0.5000</td>\n",
       "      <td id=\"T_e1567_row13_col3\" class=\"data row13 col3\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row13_col4\" class=\"data row13 col4\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row13_col5\" class=\"data row13 col5\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row13_col6\" class=\"data row13 col6\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row13_col7\" class=\"data row13 col7\" >0.0000</td>\n",
       "      <td id=\"T_e1567_row13_col8\" class=\"data row13 col8\" >0.0120</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x16a62486520>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transformation Pipeline and Model Successfully Saved\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(Pipeline(memory=Memory(location=None),\n",
       "          steps=[('numerical_imputer',\n",
       "                  TransformerWrapper(exclude=None,\n",
       "                                     include=['tenure', 'MonthlyCharges',\n",
       "                                              'TotalCharges',\n",
       "                                              'ChargesPerMonth_from_total',\n",
       "                                              'MonthsOfService_est',\n",
       "                                              'PhoneService_Yes',\n",
       "                                              'Contract_One year',\n",
       "                                              'Contract_Two year',\n",
       "                                              'PaymentMethod_Credit card '\n",
       "                                              '(automatic)',\n",
       "                                              'PaymentMethod_Electronic check',\n",
       "                                              'PaymentMethod_Mailed c...\n",
       "                 ('trained_model',\n",
       "                  SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
       "                                early_stopping=False, epsilon=0.1, eta0=0.001,\n",
       "                                fit_intercept=True, l1_ratio=0.15,\n",
       "                                learning_rate='optimal', loss='hinge',\n",
       "                                max_iter=1000, n_iter_no_change=5, n_jobs=-1,\n",
       "                                penalty='l2', power_t=0.5, random_state=123,\n",
       "                                shuffle=True, tol=0.001, validation_fraction=0.1,\n",
       "                                verbose=0, warm_start=False))],\n",
       "          verbose=False),\n",
       " 'churn_pipeline.pkl')"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Setup PyCaret environment\n",
    "s = setup(\n",
    "    data=churn_df,\n",
    "    target=\"Churn\",\n",
    "    session_id=123\n",
    ")\n",
    "\n",
    "# Train & select best model\n",
    "best_model = compare_models()\n",
    "\n",
    "# Save the entire pipeline (model + preprocessing)\n",
    "save_model(best_model, \"churn_pipeline\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5c939f8f-5881-48f0-9959-deed6747761f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_6dedd th {\n",
       "  text-align: left;\n",
       "}\n",
       "#T_6dedd_row0_col0, #T_6dedd_row0_col1, #T_6dedd_row0_col3, #T_6dedd_row0_col4, #T_6dedd_row0_col5, #T_6dedd_row0_col6, #T_6dedd_row0_col7, #T_6dedd_row1_col0, #T_6dedd_row1_col1, #T_6dedd_row1_col2, #T_6dedd_row1_col4, #T_6dedd_row2_col0, #T_6dedd_row2_col1, #T_6dedd_row2_col2, #T_6dedd_row2_col3, #T_6dedd_row2_col4, #T_6dedd_row2_col5, #T_6dedd_row2_col6, #T_6dedd_row2_col7, #T_6dedd_row3_col0, #T_6dedd_row3_col1, #T_6dedd_row3_col2, #T_6dedd_row3_col3, #T_6dedd_row3_col4, #T_6dedd_row3_col5, #T_6dedd_row3_col6, #T_6dedd_row3_col7, #T_6dedd_row4_col0, #T_6dedd_row4_col2, #T_6dedd_row4_col3, #T_6dedd_row4_col5, #T_6dedd_row4_col6, #T_6dedd_row4_col7, #T_6dedd_row5_col0, #T_6dedd_row5_col1, #T_6dedd_row5_col2, #T_6dedd_row5_col3, #T_6dedd_row5_col4, #T_6dedd_row5_col5, #T_6dedd_row5_col6, #T_6dedd_row5_col7, #T_6dedd_row6_col0, #T_6dedd_row6_col1, #T_6dedd_row6_col2, #T_6dedd_row6_col3, #T_6dedd_row6_col4, #T_6dedd_row6_col5, #T_6dedd_row6_col6, #T_6dedd_row6_col7, #T_6dedd_row7_col0, #T_6dedd_row7_col1, #T_6dedd_row7_col2, #T_6dedd_row7_col3, #T_6dedd_row7_col4, #T_6dedd_row7_col5, #T_6dedd_row7_col6, #T_6dedd_row7_col7, #T_6dedd_row8_col0, #T_6dedd_row8_col1, #T_6dedd_row8_col2, #T_6dedd_row8_col3, #T_6dedd_row8_col4, #T_6dedd_row8_col5, #T_6dedd_row8_col6, #T_6dedd_row8_col7, #T_6dedd_row9_col0, #T_6dedd_row9_col1, #T_6dedd_row9_col2, #T_6dedd_row9_col3, #T_6dedd_row9_col4, #T_6dedd_row9_col5, #T_6dedd_row9_col6, #T_6dedd_row9_col7, #T_6dedd_row10_col0, #T_6dedd_row10_col1, #T_6dedd_row10_col2, #T_6dedd_row10_col3, #T_6dedd_row10_col4, #T_6dedd_row10_col5, #T_6dedd_row10_col6, #T_6dedd_row10_col7, #T_6dedd_row11_col0, #T_6dedd_row11_col1, #T_6dedd_row11_col2, #T_6dedd_row11_col3, #T_6dedd_row11_col4, #T_6dedd_row11_col5, #T_6dedd_row11_col6, #T_6dedd_row11_col7, #T_6dedd_row12_col0, #T_6dedd_row12_col1, #T_6dedd_row12_col2, #T_6dedd_row12_col3, #T_6dedd_row12_col4, #T_6dedd_row12_col5, #T_6dedd_row12_col6, #T_6dedd_row12_col7, #T_6dedd_row13_col0, #T_6dedd_row13_col1, #T_6dedd_row13_col2, #T_6dedd_row13_col3, #T_6dedd_row13_col4, #T_6dedd_row13_col5, #T_6dedd_row13_col6, #T_6dedd_row13_col7 {\n",
       "  text-align: left;\n",
       "}\n",
       "#T_6dedd_row0_col2, #T_6dedd_row1_col3, #T_6dedd_row1_col5, #T_6dedd_row1_col6, #T_6dedd_row1_col7, #T_6dedd_row4_col1, #T_6dedd_row4_col4 {\n",
       "  text-align: left;\n",
       "  background-color: yellow;\n",
       "}\n",
       "#T_6dedd_row0_col8, #T_6dedd_row1_col8, #T_6dedd_row2_col8, #T_6dedd_row3_col8, #T_6dedd_row4_col8, #T_6dedd_row5_col8, #T_6dedd_row6_col8, #T_6dedd_row7_col8, #T_6dedd_row8_col8, #T_6dedd_row9_col8, #T_6dedd_row10_col8, #T_6dedd_row11_col8, #T_6dedd_row12_col8 {\n",
       "  text-align: left;\n",
       "  background-color: lightgrey;\n",
       "}\n",
       "#T_6dedd_row13_col8 {\n",
       "  text-align: left;\n",
       "  background-color: yellow;\n",
       "  background-color: lightgrey;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_6dedd\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_6dedd_level0_col0\" class=\"col_heading level0 col0\" >Model</th>\n",
       "      <th id=\"T_6dedd_level0_col1\" class=\"col_heading level0 col1\" >Accuracy</th>\n",
       "      <th id=\"T_6dedd_level0_col2\" class=\"col_heading level0 col2\" >AUC</th>\n",
       "      <th id=\"T_6dedd_level0_col3\" class=\"col_heading level0 col3\" >Recall</th>\n",
       "      <th id=\"T_6dedd_level0_col4\" class=\"col_heading level0 col4\" >Prec.</th>\n",
       "      <th id=\"T_6dedd_level0_col5\" class=\"col_heading level0 col5\" >F1</th>\n",
       "      <th id=\"T_6dedd_level0_col6\" class=\"col_heading level0 col6\" >Kappa</th>\n",
       "      <th id=\"T_6dedd_level0_col7\" class=\"col_heading level0 col7\" >MCC</th>\n",
       "      <th id=\"T_6dedd_level0_col8\" class=\"col_heading level0 col8\" >TT (Sec)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row0\" class=\"row_heading level0 row0\" >ridge</th>\n",
       "      <td id=\"T_6dedd_row0_col0\" class=\"data row0 col0\" >Ridge Classifier</td>\n",
       "      <td id=\"T_6dedd_row0_col1\" class=\"data row0 col1\" >0.7347</td>\n",
       "      <td id=\"T_6dedd_row0_col2\" class=\"data row0 col2\" >0.8246</td>\n",
       "      <td id=\"T_6dedd_row0_col3\" class=\"data row0 col3\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row0_col4\" class=\"data row0 col4\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row0_col5\" class=\"data row0 col5\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row0_col6\" class=\"data row0 col6\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row0_col7\" class=\"data row0 col7\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row0_col8\" class=\"data row0 col8\" >0.0130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row1\" class=\"row_heading level0 row1\" >nb</th>\n",
       "      <td id=\"T_6dedd_row1_col0\" class=\"data row1 col0\" >Naive Bayes</td>\n",
       "      <td id=\"T_6dedd_row1_col1\" class=\"data row1 col1\" >0.7444</td>\n",
       "      <td id=\"T_6dedd_row1_col2\" class=\"data row1 col2\" >0.8136</td>\n",
       "      <td id=\"T_6dedd_row1_col3\" class=\"data row1 col3\" >0.7179</td>\n",
       "      <td id=\"T_6dedd_row1_col4\" class=\"data row1 col4\" >0.5132</td>\n",
       "      <td id=\"T_6dedd_row1_col5\" class=\"data row1 col5\" >0.5984</td>\n",
       "      <td id=\"T_6dedd_row1_col6\" class=\"data row1 col6\" >0.4185</td>\n",
       "      <td id=\"T_6dedd_row1_col7\" class=\"data row1 col7\" >0.4314</td>\n",
       "      <td id=\"T_6dedd_row1_col8\" class=\"data row1 col8\" >0.0130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row2\" class=\"row_heading level0 row2\" >lr</th>\n",
       "      <td id=\"T_6dedd_row2_col0\" class=\"data row2 col0\" >Logistic Regression</td>\n",
       "      <td id=\"T_6dedd_row2_col1\" class=\"data row2 col1\" >0.7426</td>\n",
       "      <td id=\"T_6dedd_row2_col2\" class=\"data row2 col2\" >0.8110</td>\n",
       "      <td id=\"T_6dedd_row2_col3\" class=\"data row2 col3\" >0.0474</td>\n",
       "      <td id=\"T_6dedd_row2_col4\" class=\"data row2 col4\" >0.5779</td>\n",
       "      <td id=\"T_6dedd_row2_col5\" class=\"data row2 col5\" >0.0854</td>\n",
       "      <td id=\"T_6dedd_row2_col6\" class=\"data row2 col6\" >0.0573</td>\n",
       "      <td id=\"T_6dedd_row2_col7\" class=\"data row2 col7\" >0.1143</td>\n",
       "      <td id=\"T_6dedd_row2_col8\" class=\"data row2 col8\" >0.0600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row3\" class=\"row_heading level0 row3\" >knn</th>\n",
       "      <td id=\"T_6dedd_row3_col0\" class=\"data row3 col0\" >K Neighbors Classifier</td>\n",
       "      <td id=\"T_6dedd_row3_col1\" class=\"data row3 col1\" >0.7649</td>\n",
       "      <td id=\"T_6dedd_row3_col2\" class=\"data row3 col2\" >0.7476</td>\n",
       "      <td id=\"T_6dedd_row3_col3\" class=\"data row3 col3\" >0.4312</td>\n",
       "      <td id=\"T_6dedd_row3_col4\" class=\"data row3 col4\" >0.5758</td>\n",
       "      <td id=\"T_6dedd_row3_col5\" class=\"data row3 col5\" >0.4923</td>\n",
       "      <td id=\"T_6dedd_row3_col6\" class=\"data row3 col6\" >0.3437</td>\n",
       "      <td id=\"T_6dedd_row3_col7\" class=\"data row3 col7\" >0.3502</td>\n",
       "      <td id=\"T_6dedd_row3_col8\" class=\"data row3 col8\" >0.0270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row4\" class=\"row_heading level0 row4\" >svm</th>\n",
       "      <td id=\"T_6dedd_row4_col0\" class=\"data row4 col0\" >SVM - Linear Kernel</td>\n",
       "      <td id=\"T_6dedd_row4_col1\" class=\"data row4 col1\" >0.7740</td>\n",
       "      <td id=\"T_6dedd_row4_col2\" class=\"data row4 col2\" >0.7469</td>\n",
       "      <td id=\"T_6dedd_row4_col3\" class=\"data row4 col3\" >0.3955</td>\n",
       "      <td id=\"T_6dedd_row4_col4\" class=\"data row4 col4\" >0.6249</td>\n",
       "      <td id=\"T_6dedd_row4_col5\" class=\"data row4 col5\" >0.4672</td>\n",
       "      <td id=\"T_6dedd_row4_col6\" class=\"data row4 col6\" >0.3388</td>\n",
       "      <td id=\"T_6dedd_row4_col7\" class=\"data row4 col7\" >0.3597</td>\n",
       "      <td id=\"T_6dedd_row4_col8\" class=\"data row4 col8\" >0.0150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row5\" class=\"row_heading level0 row5\" >rf</th>\n",
       "      <td id=\"T_6dedd_row5_col0\" class=\"data row5 col0\" >Random Forest Classifier</td>\n",
       "      <td id=\"T_6dedd_row5_col1\" class=\"data row5 col1\" >0.7347</td>\n",
       "      <td id=\"T_6dedd_row5_col2\" class=\"data row5 col2\" >0.6955</td>\n",
       "      <td id=\"T_6dedd_row5_col3\" class=\"data row5 col3\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row5_col4\" class=\"data row5 col4\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row5_col5\" class=\"data row5 col5\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row5_col6\" class=\"data row5 col6\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row5_col7\" class=\"data row5 col7\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row5_col8\" class=\"data row5 col8\" >0.0620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row6\" class=\"row_heading level0 row6\" >et</th>\n",
       "      <td id=\"T_6dedd_row6_col0\" class=\"data row6 col0\" >Extra Trees Classifier</td>\n",
       "      <td id=\"T_6dedd_row6_col1\" class=\"data row6 col1\" >0.7347</td>\n",
       "      <td id=\"T_6dedd_row6_col2\" class=\"data row6 col2\" >0.5935</td>\n",
       "      <td id=\"T_6dedd_row6_col3\" class=\"data row6 col3\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row6_col4\" class=\"data row6 col4\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row6_col5\" class=\"data row6 col5\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row6_col6\" class=\"data row6 col6\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row6_col7\" class=\"data row6 col7\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row6_col8\" class=\"data row6 col8\" >0.0430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row7\" class=\"row_heading level0 row7\" >lightgbm</th>\n",
       "      <td id=\"T_6dedd_row7_col0\" class=\"data row7 col0\" >Light Gradient Boosting Machine</td>\n",
       "      <td id=\"T_6dedd_row7_col1\" class=\"data row7 col1\" >0.7347</td>\n",
       "      <td id=\"T_6dedd_row7_col2\" class=\"data row7 col2\" >0.5462</td>\n",
       "      <td id=\"T_6dedd_row7_col3\" class=\"data row7 col3\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row7_col4\" class=\"data row7 col4\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row7_col5\" class=\"data row7 col5\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row7_col6\" class=\"data row7 col6\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row7_col7\" class=\"data row7 col7\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row7_col8\" class=\"data row7 col8\" >0.0330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row8\" class=\"row_heading level0 row8\" >gbc</th>\n",
       "      <td id=\"T_6dedd_row8_col0\" class=\"data row8 col0\" >Gradient Boosting Classifier</td>\n",
       "      <td id=\"T_6dedd_row8_col1\" class=\"data row8 col1\" >0.7347</td>\n",
       "      <td id=\"T_6dedd_row8_col2\" class=\"data row8 col2\" >0.5100</td>\n",
       "      <td id=\"T_6dedd_row8_col3\" class=\"data row8 col3\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row8_col4\" class=\"data row8 col4\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row8_col5\" class=\"data row8 col5\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row8_col6\" class=\"data row8 col6\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row8_col7\" class=\"data row8 col7\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row8_col8\" class=\"data row8 col8\" >0.0520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row9\" class=\"row_heading level0 row9\" >dt</th>\n",
       "      <td id=\"T_6dedd_row9_col0\" class=\"data row9 col0\" >Decision Tree Classifier</td>\n",
       "      <td id=\"T_6dedd_row9_col1\" class=\"data row9 col1\" >0.7347</td>\n",
       "      <td id=\"T_6dedd_row9_col2\" class=\"data row9 col2\" >0.5000</td>\n",
       "      <td id=\"T_6dedd_row9_col3\" class=\"data row9 col3\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row9_col4\" class=\"data row9 col4\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row9_col5\" class=\"data row9 col5\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row9_col6\" class=\"data row9 col6\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row9_col7\" class=\"data row9 col7\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row9_col8\" class=\"data row9 col8\" >0.0140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row10\" class=\"row_heading level0 row10\" >qda</th>\n",
       "      <td id=\"T_6dedd_row10_col0\" class=\"data row10 col0\" >Quadratic Discriminant Analysis</td>\n",
       "      <td id=\"T_6dedd_row10_col1\" class=\"data row10 col1\" >0.7347</td>\n",
       "      <td id=\"T_6dedd_row10_col2\" class=\"data row10 col2\" >0.5000</td>\n",
       "      <td id=\"T_6dedd_row10_col3\" class=\"data row10 col3\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row10_col4\" class=\"data row10 col4\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row10_col5\" class=\"data row10 col5\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row10_col6\" class=\"data row10 col6\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row10_col7\" class=\"data row10 col7\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row10_col8\" class=\"data row10 col8\" >0.0140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row11\" class=\"row_heading level0 row11\" >ada</th>\n",
       "      <td id=\"T_6dedd_row11_col0\" class=\"data row11 col0\" >Ada Boost Classifier</td>\n",
       "      <td id=\"T_6dedd_row11_col1\" class=\"data row11 col1\" >0.7347</td>\n",
       "      <td id=\"T_6dedd_row11_col2\" class=\"data row11 col2\" >0.5000</td>\n",
       "      <td id=\"T_6dedd_row11_col3\" class=\"data row11 col3\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row11_col4\" class=\"data row11 col4\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row11_col5\" class=\"data row11 col5\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row11_col6\" class=\"data row11 col6\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row11_col7\" class=\"data row11 col7\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row11_col8\" class=\"data row11 col8\" >0.0130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row12\" class=\"row_heading level0 row12\" >lda</th>\n",
       "      <td id=\"T_6dedd_row12_col0\" class=\"data row12 col0\" >Linear Discriminant Analysis</td>\n",
       "      <td id=\"T_6dedd_row12_col1\" class=\"data row12 col1\" >0.7347</td>\n",
       "      <td id=\"T_6dedd_row12_col2\" class=\"data row12 col2\" >0.5000</td>\n",
       "      <td id=\"T_6dedd_row12_col3\" class=\"data row12 col3\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row12_col4\" class=\"data row12 col4\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row12_col5\" class=\"data row12 col5\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row12_col6\" class=\"data row12 col6\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row12_col7\" class=\"data row12 col7\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row12_col8\" class=\"data row12 col8\" >0.0120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_6dedd_level0_row13\" class=\"row_heading level0 row13\" >dummy</th>\n",
       "      <td id=\"T_6dedd_row13_col0\" class=\"data row13 col0\" >Dummy Classifier</td>\n",
       "      <td id=\"T_6dedd_row13_col1\" class=\"data row13 col1\" >0.7347</td>\n",
       "      <td id=\"T_6dedd_row13_col2\" class=\"data row13 col2\" >0.5000</td>\n",
       "      <td id=\"T_6dedd_row13_col3\" class=\"data row13 col3\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row13_col4\" class=\"data row13 col4\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row13_col5\" class=\"data row13 col5\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row13_col6\" class=\"data row13 col6\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row13_col7\" class=\"data row13 col7\" >0.0000</td>\n",
       "      <td id=\"T_6dedd_row13_col8\" class=\"data row13 col8\" >0.0110</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x16a5f918a00>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare models based on AUC (can also use 'Accuracy', 'Recall', etc.)\n",
    "best_model = compare_models(sort='AUC')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "ac14361a-d9a6-4cb9-aef3-955d607f15cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9b02b2036cf244eeb1c5eaf35b386747",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(ToggleButtons(description='Plot Type:', icons=('',), options=(('Pipeline Plot', 'pipelin…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Evaluate results visually\n",
    "evaluate_model(best_model)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "edb872b7-3502-4e43-9895-2d4c4fa73c6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transformation Pipeline and Model Successfully Saved\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(Pipeline(memory=Memory(location=None),\n",
       "          steps=[('numerical_imputer',\n",
       "                  TransformerWrapper(exclude=None,\n",
       "                                     include=['tenure', 'MonthlyCharges',\n",
       "                                              'TotalCharges',\n",
       "                                              'ChargesPerMonth_from_total',\n",
       "                                              'MonthsOfService_est',\n",
       "                                              'PhoneService_Yes',\n",
       "                                              'Contract_One year',\n",
       "                                              'Contract_Two year',\n",
       "                                              'PaymentMethod_Credit card '\n",
       "                                              '(automatic)',\n",
       "                                              'PaymentMethod_Electronic check',\n",
       "                                              'PaymentMethod_Mailed c...\n",
       "                                                               return_df=True,\n",
       "                                                               smoothing=10,\n",
       "                                                               verbose=0))),\n",
       "                 ('clean_column_names',\n",
       "                  TransformerWrapper(exclude=None, include=None,\n",
       "                                     transformer=CleanColumnNames(match='[\\\\]\\\\[\\\\,\\\\{\\\\}\\\\\"\\\\:]+'))),\n",
       "                 ('actual_estimator',\n",
       "                  RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True,\n",
       "                                  fit_intercept=True, max_iter=None,\n",
       "                                  positive=False, random_state=123,\n",
       "                                  solver='auto', tol=0.0001))],\n",
       "          verbose=False),\n",
       " 'churn_model.pkl')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Finalize the model for deployment\n",
    "final_model = finalize_model(best_model)\n",
    "\n",
    "# Save model to disk\n",
    "save_model(final_model, 'churn_model')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "229e0d03-2af0-4a2d-b2fd-a4f86ef995a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Preprocessing for New Data (same as Week 2 feature engineering)\n",
    "def preprocess_new_data(df):\n",
    "    # Feature engineering\n",
    "    df['ChargesPerMonth_from_total'] = df['TotalCharges'] / (df['tenure'] + 1e-5)\n",
    "    df['MonthsOfService_est'] = df['tenure']\n",
    "\n",
    "    # One-hot encode categoricals\n",
    "    df = pd.get_dummies(df, columns=['PhoneService','Contract','PaymentMethod'])\n",
    "\n",
    "    # Add any missing dummy columns that model expects\n",
    "    expected_cols = [\n",
    "        'ChargesPerMonth_from_total', 'MonthsOfService_est',\n",
    "        'PhoneService_Yes', 'Contract_One year', 'Contract_Two year',\n",
    "        'PaymentMethod_Credit card (automatic)',\n",
    "        'PaymentMethod_Electronic check', 'PaymentMethod_Mailed check'\n",
    "    ]\n",
    "    for col in expected_cols:\n",
    "        if col not in df.columns:\n",
    "            df[col] = 0\n",
    "\n",
    "    return df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "fd91e43a-b450-49d2-825d-41191dbaa316",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 6: Predict Function\n",
    "def predict_churn(df: pd.DataFrame):\n",
    "    model = load_model(\"churn_model\")\n",
    "    df_processed = preprocess_new_data(df)\n",
    "\n",
    "    # Get predictions with probabilities\n",
    "    predictions = predict_model(model, data=df_processed, raw_score=True)\n",
    "\n",
    "    # Detect probability columns automatically\n",
    "    prob_cols = [c for c in predictions.columns if \"Score\" in c or \"prob\" in c]\n",
    "    print(\"Available probability columns:\", prob_cols)\n",
    "\n",
    "    # Build clean output\n",
    "    keep_cols = ['customerID', 'prediction_label'] + prob_cols\n",
    "    return predictions[keep_cols]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "2a4b188c-4f07-4d5f-b45f-b8fa1cf446f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transformation Pipeline and Model Successfully Loaded\n"
     ]
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Available probability columns: []\n",
      "Predictions on new data:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>prediction_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9305-CKSKC</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1452-KNGVK</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6723-OKKJM</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7832-POPKP</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6348-TACGU</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID  prediction_label\n",
       "0  9305-CKSKC                 0\n",
       "1  1452-KNGVK                 0\n",
       "2  6723-OKKJM                 0\n",
       "3  7832-POPKP                 0\n",
       "4  6348-TACGU                 0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Predictions saved to new_churn_predictions.csv\n"
     ]
    }
   ],
   "source": [
    "# Step 7: Test on New Data\n",
    "new_data = pd.read_csv(\"new_churn_data.csv\")\n",
    "results = predict_churn(new_data)\n",
    "\n",
    "print(\"Predictions on new data:\")\n",
    "display(results)\n",
    "\n",
    "# Save to CSV\n",
    "results.to_csv(\"new_churn_predictions.csv\", index=False)\n",
    "print(\"✅ Predictions saved to new_churn_predictions.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "7aa51f58-bd5b-45b1-af0b-f5f678008489",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True Values: [1, 0, 0, 1, 0]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>Predicted</th>\n",
       "      <th>True</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9305-CKSKC</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1452-KNGVK</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6723-OKKJM</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7832-POPKP</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6348-TACGU</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID  Predicted  True\n",
       "0  9305-CKSKC          0     1\n",
       "1  1452-KNGVK          0     0\n",
       "2  6723-OKKJM          0     0\n",
       "3  7832-POPKP          0     1\n",
       "4  6348-TACGU          0     0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Step 8: Compare Predictions with True Values (example only)\n",
    "true_values = [1, 0, 0, 1, 0]  # Replace with actual ground truth if available\n",
    "print(\"True Values:\", true_values)\n",
    "\n",
    "# Align shapes if needed\n",
    "if len(true_values) == len(results):\n",
    "    comparison = pd.DataFrame({\n",
    "        \"customerID\": results['customerID'],\n",
    "        \"Predicted\": results['prediction_label'],\n",
    "        \"True\": true_values\n",
    "    })\n",
    "    display(comparison)\n",
    "else:\n",
    "    print(\"⚠️ True values length does not match predictions.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "db41940c-e0b1-43b4-8ed9-26456d0e9f8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "In this notebook, I completed the full process of building, evaluating, and deploying a churn prediction model. \n",
      "We began by importing the customer churn dataset and setting up the PyCaret classification environment, \n",
      "where the 'Churn' column was defined as the target variable. Using PyCaret’s automated machine learning workflow, \n",
      "we compared multiple classification algorithms and selected the best performing model based on the AUC metric, \n",
      "since it provides a balanced measure of classification performance across different thresholds. \n",
      "\n",
      "Once the best model was identified, we finalized and saved it as 'churn_model' so that it could be re-used for \n",
      "future predictions without retraining. To ensure consistency, we built a preprocessing pipeline that replicated \n",
      "the feature engineering steps applied to the training data. This included creating new ratio-based features \n",
      "such as charges per month, estimating months of service, and handling categorical data with one-hot encoding. \n",
      "We also accounted for any potential missing dummy variables by adding them with default values, ensuring that \n",
      "new data would always align with the structure expected by the trained model. \n",
      "\n",
      "For predictions, wI created a function that loads the saved model, applies preprocessing to new incoming customer \n",
      "data, and generates both the predicted churn labels and the associated probabilities of each class. We tested this \n",
      "workflow on a new dataset, validated that the outputs contained customer IDs, labels, and probability scores, and \n",
      "exported the results into a CSV file called 'new_churn_predictions.csv'. This file can be shared or analyzed further \n",
      "outside of the notebook. Additionally, if actual churn outcomes are available for the new dataset, our workflow \n",
      "can compare predicted values against true values to assess performance on unseen data. \n",
      "\n",
      "By completing this notebook, we have developed a reproducible machine learning pipeline that automates data \n",
      "preprocessing, model training, evaluation, and prediction generation for churn analysis. The project demonstrates \n",
      "how AutoML tools like PyCaret can simplify the modeling process while still allowing for customization, and it \n",
      "provides a fully operational system that can be applied to real business scenarios where predicting customer churn \n",
      "is essential for retention strategies.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Step 9: Final Summary\n",
    "summary = \"\"\"\n",
    "In this notebook, I completed the full process of building, evaluating, and deploying a churn prediction model. \n",
    "We began by importing the customer churn dataset and setting up the PyCaret classification environment, \n",
    "where the 'Churn' column was defined as the target variable. Using PyCaret’s automated machine learning workflow, \n",
    "we compared multiple classification algorithms and selected the best performing model based on the AUC metric, \n",
    "since it provides a balanced measure of classification performance across different thresholds. \n",
    "\n",
    "Once the best model was identified, we finalized and saved it as 'churn_model' so that it could be re-used for \n",
    "future predictions without retraining. To ensure consistency, we built a preprocessing pipeline that replicated \n",
    "the feature engineering steps applied to the training data. This included creating new ratio-based features \n",
    "such as charges per month, estimating months of service, and handling categorical data with one-hot encoding. \n",
    "We also accounted for any potential missing dummy variables by adding them with default values, ensuring that \n",
    "new data would always align with the structure expected by the trained model. \n",
    "\n",
    "For predictions, wI created a function that loads the saved model, applies preprocessing to new incoming customer \n",
    "data, and generates both the predicted churn labels and the associated probabilities of each class. We tested this \n",
    "workflow on a new dataset, validated that the outputs contained customer IDs, labels, and probability scores, and \n",
    "exported the results into a CSV file called 'new_churn_predictions.csv'. This file can be shared or analyzed further \n",
    "outside of the notebook. Additionally, if actual churn outcomes are available for the new dataset, our workflow \n",
    "can compare predicted values against true values to assess performance on unseen data. \n",
    "\n",
    "By completing this notebook, we have developed a reproducible machine learning pipeline that automates data \n",
    "preprocessing, model training, evaluation, and prediction generation for churn analysis. The project demonstrates \n",
    "how AutoML tools like PyCaret can simplify the modeling process while still allowing for customization, and it \n",
    "provides a fully operational system that can be applied to real business scenarios where predicting customer churn \n",
    "is essential for retention strategies.\n",
    "\"\"\"\n",
    "print(summary)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eba140b9-afbc-4480-a567-f9bb797b1f97",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:pycaret_env]",
   "language": "python",
   "name": "conda-env-pycaret_env-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.23"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
